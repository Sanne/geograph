<?xml version="1.0" encoding="UTF-8"?>
<infinispan xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="urn:infinispan:config:5.1 http://www.infinispan.org/schemas/infinispan-config-5.1.xsd"
       xmlns="urn:infinispan:config:5.1">

    <global>
       <transport clusterName="GeographCluster"/>
       <globalJmxStatistics enabled="true"/>
    </global>

    <default>
       <jmxStatistics enabled="true"/>
       <clustering mode="distribution">
          <hash numOwners="2" rehashRpcTimeout="120000"/>
          <async/>
       </clustering>
    <!-- Default
         transactionManagerLookupClass="org.infinispan.transaction.lookup.GenericTransactionManagerLookup"
         provides a DummyTransactionManager, which according to documentation
         (http://docs.jboss.org/infinispan/4.0/apidocs/org/infinispan/transaction/tm/DummyTransactionManager.html):
         "Simple transaction manager implementation that maintains transaction
         state in memory only."

         Is it enough?
    -->
    <!-- <transaction -->
    <!--   syncRollbackPhase="false" -->
    <!--   syncCommitPhase="false" -->
    <!--   useEagerLocking="false"/> -->
    <transaction
        transactionMode="TRANSACTIONAL"
        transactionManagerLookupClass="org.infinispan.transaction.lookup.JBossTransactionManagerLookup"/>


    <!-- Should we enable eviction?  I think not. -->
    <eviction strategy="NONE" maxEntries="-1"/>
    <!-- <eviction strategy="LRU" wakeUpInterval="2000" maxEntries="50000"/> -->

    <expiration wakeUpInterval="-1" />

    <!-- Amazingly using REPEATABLE_READ instead of the default READ_COMMITTED
         increases performance.  Why?  Checkout
         org.infinispan.interceptors.LockingInterceptor.doAfterCall().  This
         method takes a lot of CPU when putting values under READ_COMMITTED!
         -->
    <locking isolationLevel="REPEATABLE_READ" writeSkewCheck="true" />

    <versioning versioningScheme="SIMPLE" enabled="true" />
    <!--
    <loaders passivation="false" shared="false" preload="false">
      <loader class="org.infinispan.loaders.file.FileCacheStore"
           fetchPersistentState="true"
           purgerThreads="3"
           purgeSynchronously="true"
           ignoreModifications="false"
           purgeOnStartup="false">
        <properties>
          <property name="location" value="/tmp/geograph"/>
        </properties>
      </loader>
    </loaders>
    -->
  </default>
</infinispan>

